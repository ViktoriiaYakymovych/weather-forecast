{"version":3,"file":"static/js/196.a9e666cf.chunk.js","mappings":"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","sources":["api.js","components/CitiesList/CitiesList.styled.js","pages/Home/Home.styled.js","components/Forecast/Forecast.jsx","pages/WeatherForCity/WeatherForCity.jsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\naxios.defaults.baseURL =\r\n  \"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services\";\r\nconst API_KEY = \"E4W5RGXKFH3UTAD62NKRRA3L3\";\r\n\r\nconst fetchWeatherForCities = async (\r\n  controller,\r\n  cities = \"London%2CUK%7CParis%2CFrance%7CTokyo%2CJapan\"\r\n) => {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `/timelinemulti?key=${API_KEY}&locations=${cities}`,\r\n      { signal: controller.signal }\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    if (error.code !== \"ERR_CANCELED\") {\r\n      console.log(error.message);\r\n    }\r\n  }\r\n};\r\n\r\nconst fetchCityWeatherForToday = async (controller, city = \"Berlin\") => {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `/timeline/${city}/today?unitGroup=metric&include=days\r\n&key=${API_KEY}&contentType=json`,\r\n      { signal: controller.signal }\r\n    );\r\n    console.log(data);\r\n    return data;\r\n  } catch (error) {\r\n    if (error.code !== \"ERR_CANCELED\") {\r\n      console.log(error.message);\r\n    }\r\n  }\r\n};\r\n\r\nconst fetchCityWeatherForDays = async (controller, city = \"Berlin\") => {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `/timeline/${city}/next7days?unitGroup=metric&include=days&key=${API_KEY}&contentType=json`,\r\n      { signal: controller.signal }\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    if (error.code !== \"ERR_CANCELED\") {\r\n      console.log(error.message);\r\n    }\r\n  }\r\n};\r\n\r\nconst api = {\r\n  fetchWeatherForCities,\r\n  fetchCityWeatherForDays,\r\n  fetchCityWeatherForToday,\r\n};\r\n\r\nexport default api;\r\n\r\n/* request FROM DATE TO DATE for the city:\r\nhttps://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/[city]/[date1]/[date2]?unitGroup=metric&amp;include=days&amp;key=YOUR_API_KEY&amp;contentType=json\r\n\r\nfor example:\r\nhttps://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/London,UK/2020-10-01/2020-12-31?key=YOUR_API_KEY \r\n*/\r\n\r\n/*\r\nrequest for today's weather in the city:\r\nhttps://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/[city]/today?unitGroup=metric&amp;include=days\r\n&amp;key=YOUR_API_KEY&amp;contentType=json\r\n\r\n\r\n*/\r\n","import { NavLink } from \"react-router-dom\";\r\nimport { styled } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  gap: 16px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-wrap: wrap;\r\n  gap: 4px;\r\n  padding: 8px;\r\n  width: 240px;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 12px;\r\n  background: #002244;\r\n  color: #eef2f7;\r\n`;\r\n\r\nexport const Link = styled(NavLink)`\r\n  padding: 4px 16px;\r\n  border: 1px solid #eef2f7;\r\n  border-radius: 12px;\r\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\r\n    color 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  &:hover {\r\n    background-color: #eef2f7;\r\n    color: #002244;\r\n  }\r\n`;\r\n","import { styled } from \"styled-components\";\r\n\r\n\r\nexport const HomeSection = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  text-align: center;\r\n  gap: 16px;\r\n\r\n  & > h2 {\r\n    color: #002244;\r\n  }\r\n`;","import {List, Item}from '../CitiesList/CitiesList.styled'\r\n\r\nconst DAYS_OF_WEEK = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n];\r\n\r\nconst Forecast = ({ forecast }) => {\r\n  return (\r\n    <List>\r\n      {forecast.map((day) => {\r\n        const date = new Date(day.datetimeEpoch * 1000);\r\n        const currentDayIndex = date.getDay();\r\n        const currentDay = DAYS_OF_WEEK[currentDayIndex];\r\n\r\n        let uv = \"\";\r\n        if (day.uvindex <= 2) {\r\n          uv = \"Low\";\r\n        } else if (day.uvindex > 2 && day.uvindex <= 5) {\r\n          uv = \"Medium\";\r\n        } else if (day.uvindex > 5 && day.uvindex <= 7) {\r\n          uv = \"High\";\r\n        } else if (day.uvindex > 7 && day.uvindex <= 10) {\r\n          uv = \"Very high\";\r\n        } else {\r\n          uv = \"Extremely high\";\r\n        }\r\n\r\n        return (\r\n          <Item key={day.datetime}>\r\n            <div>\r\n              <div>\r\n                <p>{currentDay}</p>\r\n                <p>{day.datetime}</p>\r\n              </div>\r\n              <div>\r\n                <p>{day.conditions}</p>\r\n                <img\r\n                  src={`https://raw.githubusercontent.com/visualcrossing/WeatherIcons/main/PNG/1st%20Set%20-%20Color/${day.icon}.png`}\r\n                  alt={day.icon}\r\n                />\r\n              </div>\r\n              <p>\r\n                {day.tempmax}&deg;C / {day.tempmin}&deg;C\r\n              </p>\r\n            </div>\r\n            <div>\r\n              <p>{day.description}</p>\r\n              <p>Feels like: {day.feelslike}&deg;C</p>\r\n              <p>\r\n                UV Index: {day.uvindex} {uv}\r\n              </p>\r\n              <p>Windspeed: {day.windspeed} km/h</p>\r\n            </div>\r\n          </Item>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default Forecast;\r\n","import { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport api from \"../../api\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport Forecast from \"../../components/Forecast/Forecast\";\r\nimport { HomeSection } from \"../Home/Home.styled\";\r\n\r\nconst WeatherForCity = () => {\r\n  const [forecast, setForecast] = useState([]);\r\n  const [address, setAddress] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const { city } = useParams();\r\n\r\n  useEffect(() => {\r\n    if (!city) {\r\n      return;\r\n    }\r\n    const controller = new AbortController();\r\n    const cityQuery = city.slice(1);\r\n\r\n    async function fetchForecastForCity() {\r\n      try {\r\n        setLoading(true);\r\n        const resp = await api.fetchCityWeatherForDays(controller, cityQuery);\r\n        if (!resp) {\r\n          return;\r\n        }\r\n        const { address, days } = resp;\r\n        setAddress(address);\r\n        setForecast(days);\r\n      } catch (error) {\r\n        if (error.code !== \"ERR_CANCELED\") {\r\n          setError(error.message);\r\n        }\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchForecastForCity();\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n  }, [city]);\r\n\r\n  return (\r\n    <HomeSection>\r\n      <h2>Weather forecast in {address}</h2>\r\n      {forecast && <Forecast forecast={forecast} />}\r\n      {loading && <Loader loading={loading} />}\r\n      {error && <p>Sorry, something went wrong. Please, try to update page.</p>}\r\n    </HomeSection>\r\n  );\r\n};\r\n\r\nexport default WeatherForCity;\r\n"],"names":["axios","defaults","baseURL","API_KEY","fetchWeatherForCities","async","controller","cities","arguments","length","undefined","data","get","concat","signal","error","code","console","log","message","fetchCityWeatherForDays","city","fetchCityWeatherForToday","List","styled","ul","_templateObject","_taggedTemplateLiteral","Item","li","_templateObject2","Link","NavLink","_templateObject3","HomeSection","section","DAYS_OF_WEEK","_ref","forecast","_jsx","children","map","day","currentDayIndex","Date","datetimeEpoch","getDay","currentDay","uv","uvindex","_jsxs","datetime","conditions","src","icon","alt","tempmax","tempmin","description","feelslike","windspeed","WeatherForCity","setForecast","useState","address","setAddress","loading","setLoading","setError","useParams","useEffect","AbortController","cityQuery","slice","resp","api","days","fetchForecastForCity","abort","Forecast","Loader"],"sourceRoot":""}